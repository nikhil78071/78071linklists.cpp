#include<iostream.h>
#include<conio.h>
#include<process.h>
#include<stdlib.h>
#define null 0

class cdll
{
struct node
{
int info;
struct node *prev, *next;
};
struct node *temp, *ptr, *tail;

public:
cdll()
{
tail = NULL;
}
~cdll()
{
if (!is_empty())
{
cout << "\nDeallocating memory...\n";
ptr = tail->next;
tail->next = NULL;
while (ptr != NULL)
{
temp = ptr->next;
delete ptr;
ptr = temp;
}
}
}
void create();
bool is_empty();
void count();
void search();
void insert_at_end();
void insert_at_begin();
void insert_at_loc();
void delete_at_end();
void delete_at_begin();
void delete_at_loc();
void display();
};
boll cdll::is_empty()
{
if (tail == NULL)
{
   return true;
   else
   return false;
}

}
void cdll::create()
{
char ch = 'y';
do
{
insert_at_end();
cout << "Want to enter more nodes ? (y/n) : ";
cin >> ch;
}
 while (ch == 'y');
}
void cdll::display()
{
cout << "\n\t";
if (is_empty())
cout << "Linked List is empty.";
else
{
ptr = tail;
do
{
ptr = ptr->next;
cout << " «-» " << ptr->info;
}
 while (ptr != tail);
 cout << " «-»...";
 }
 cout << endl;
}
void cdll::insert_at_end()
{
temp = new node;
cout << "\nEnter the node info : ";
cin >> temp->info;
if (is_empty())
{
tail = temp;
tail->prev = tail;
tail->next = tail;
}
else
{
temp->next = tail->next;
temp->prev = tail;
tail->next = temp;
tail = temp;
}
cout << "Inserted!" << endl;
}
void cdll::insert_at_begin()
{
temp = new node;
cout << "\nEnter the node info : ";
cin >> temp->info;
if (is_empty())
{
tail = temp;
tail->prev = tail;
tail->next = tail;
}
else
{
temp->next = tail->next;
temp->prev = tail;
tail->next->prev = temp;
tail->next = temp;
}
cout << "Inserted!" << endl;
}
void cdll::insert_at_loc()
{
if (!is_empty())
{
temp = new node;
int loc;
cout << "\nEnter the location for new node : ";
cin >> loc;
if (loc == 1)
insert_at_begin();
else
{
ptr = tail->next;
for (int i = 1; i < loc - 1; i++)
{
ptr = ptr->next;
}
if (ptr == tail)
insert_at_end();
else
{
cout << "Enter the node info : ";
cin >> temp->info;
temp->next = ptr->next;
temp->prev = ptr;
ptr->next->prev = temp;
ptr->next = temp;
cout << "Inserted!" << endl;
}
}
}
}
void cdll::delete_at_end()
{
if (!is_empty())
{
temp = tail->prev;
if (temp == tail)
{
delete temp;
tail=NULL;
}
else
{
temp->next = tail->next;
tail->next->prev = temp;
delete tail;
tail = temp;
}
cout << "\nDeleted one node from end!" << endl;
}
}
void cdll::delete_at_begin()
{
if (!is_empty())
{
temp = tail->next;
if (tail->next == tail)
{
delete temp;
tail = NULL;
}
else
{
temp->next->prev = tail;
tail->next = temp->next;
delete temp;
}
cout << "\nDeleted one node from beginning!" << endl;
}
}
void cdll::delete_at_loc()
{
if (!is_empty())
{
int loc;
cout << "\nEnter the location of node to delete : ";
cin >> loc;
if (loc == 1)
delete_at_begin();
else
{
ptr = tail->next;
for (int i = 1; i < loc - 1; i++)
{
ptr = ptr->next;
}
temp = ptr->next;
if (temp == tail)
delete_at_end();
else
{
ptr->next = temp->next;
temp->next->prev = ptr;
delete temp;
cout << "\nDeleted from location : " << loc << "!" << endl;
}
}
}
}
void cdll::count()
{
if (!is_empty())
{
int count = 0;
ptr = tail;
do
{
ptr = ptr->next;
++count;
}
 while (ptr != tail);
cout << "\nThere are " << count << " nodes in the list." << endl;
}
else
display();
}
void cdll::search()
{
if (!is_empty())
{
int n, count = 0, flag = 0;
cout << "\nEnter the node info to be searched : ";
cin >> n;
ptr = tail;
do
{
ptr = ptr->next;
++count;
if (ptr->info == n)
{
flag = 1;
break;
}
}
 while (ptr != tail);
 if (flag == 1)
 cout << "Data found at location " << count << " in the list." << endl;
 else
 cout << "Data not found in the list.";
 }
 else
 display();
}
void main()
{
int choice;
char ch;
CDLL list;
do
{
cout << "\n1. Create\n2. Insert at Beginning\n3. Insert at End\n4. Insert at Location\n5. Delete at Beginning\n6. Delete at End\n7. Delete at Location\n8. Count the nodes\n9. Search\n10. Display\n11. Exit" << endl;
cout << "Enter your choice : ";
cin >> choice;
switch (choice)
{
case 1:
list.create();
list.display();
break;
case 2:
list.insert_at_begin();
list.display();
break;
case 3:
list.insert_at_end();
list.display();
break;
case 4:
list.insert_at_loc();
list.display();
break;
case 5:
list.delete_at_begin();
list.display();
break;
case 6:
list.delete_at_end();
list.display();
break;
case 7:
list.delete_at_loc();
list.display();
break;
case 8:
list.count();
break;
case 9:
list.search();
break;
case 10:
list.display();
break;
case 11:
exit(0);
}
cout << "\nWant to operate more? (y/n) ";
cin >> ch;
}
 while (ch == 'y');